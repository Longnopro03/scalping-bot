const Binance = require('node-binance-api');
const technicalindicators = require('technicalindicators');

const binance = new Binance().options({
  APIKEY: 'YOUR_API_KEY',
  APISECRET: 'YOUR_API_SECRET'
});

const symbol = 'XRPUSDT';
const interval = '5m';
const SL_PERCENT = 0.5;  // Stop Loss
const TP_PERCENT = 0.1; // Take Profit

// L·∫•y s·ªë l∆∞·ª£ng giao d·ªãch theo 50% v·ªën
async function getQuantityByBalance(price) {
  try {
    const account = await binance.futuresAccount();
    const balance = parseFloat(account.totalWalletBalance); // Futures balance
    const tradeValue = balance * 0.5;
    const quantity = (tradeValue / price).toFixed(1);
    return quantity;
  } catch (err) {
    console.error("‚ùå L·ªói khi l·∫•y s·ªë d∆∞:", err.message);
    return 0;
  }
}

// ƒê·∫∑t l·ªánh LONG ho·∫∑c SHORT
async function placeOrder(direction, price) {
  const quantity = await getQuantityByBalance(price);
  if (quantity <= 0) return console.log("Kh√¥ng ƒë·ªß s·ªë d∆∞ ƒë·ªÉ v√†o l·ªánh");

  const stopLoss = (direction === 'LONG') 
    ? (price * (1 - SL_PERCENT / 100)).toFixed(4)
    : (price * (1 + SL_PERCENT / 100)).toFixed(4);

  const takeProfit = (direction === 'LONG')
    ? (price * (1 + TP_PERCENT / 100)).toFixed(4)
    : (price * (1 - TP_PERCENT / 100)).toFixed(4);

  console.log(`üöÄ V√†o l·ªánh ${direction} t·∫°i ${price} | SL: ${stopLoss} | TP: ${takeProfit} | S·ªë l∆∞·ª£ng: ${quantity}`);

  try {
    if (direction === 'LONG') {
      await binance.futuresMarketBuy(symbol, quantity);
      await binance.futuresOrder('SELL', symbol, quantity, takeProfit, {
        reduceOnly: true, type: 'LIMIT', timeInForce: 'GTC'
      });
      await binance.futuresOrder('SELL', symbol, quantity, null, {
        stopPrice: stopLoss, reduceOnly: true, type: 'STOP_MARKET'
      });
    } else {
      await binance.futuresMarketSell(symbol, quantity);
      await binance.futuresOrder('BUY', symbol, quantity, takeProfit, {
        reduceOnly: true, type: 'LIMIT', timeInForce: 'GTC'
      });
      await binance.futuresOrder('BUY', symbol, quantity, null, {
        stopPrice: stopLoss, reduceOnly: true, type: 'STOP_MARKET'
      });
    }
  } catch (err) {
    console.error("‚ùå L·ªói khi ƒë·∫∑t l·ªánh:", err.message);
  }
}

// Ph√¢n t√≠ch k·ªπ thu·∫≠t & quy·∫øt ƒë·ªãnh v√†o l·ªánh
async function checkSignal() {
  try {
    const candles = await binance.futuresCandles(symbol, interval, { limit: 100 });
    const closes = candles.map(c => parseFloat(c.close));
    const highs = candles.map(c => parseFloat(c.high));
    const lows = candles.map(c => parseFloat(c.low));

    const ema50 = technicalindicators.EMA.calculate({ period: 50, values: closes });
    const ema200 = technicalindicators.EMA.calculate({ period: 200, values: closes });

    const stoch = technicalindicators.Stochastic.calculate({
      high: highs, low: lows, close: closes, period: 14, signalPeriod: 3
    });

    const macd = technicalindicators.MACD.calculate({
      values: closes,
      fastPeriod: 12, slowPeriod: 26, signalPeriod: 9,
      SimpleMAOscillator: false, SimpleMASignal: false
    });

    const lastClose = closes[closes.length - 1];
    const lastEMA50 = ema50[ema50.length - 1];
    const lastEMA200 = ema200[ema200.length - 1];
    const lastStoch = stoch[stoch.length - 1];
    const lastMACD = macd[macd.length - 1];

    const longSignal = lastEMA50 > lastEMA200 &&
                       lastStoch.k < 20 && lastStoch.k > lastStoch.d &&
                       lastMACD.MACD > lastMACD.signal;

    const shortSignal = lastEMA50 < lastEMA200 &&
                        lastStoch.k > 80 && lastStoch.k < lastStoch.d &&
                        lastMACD.MACD < lastMACD.signal;

    if (longSignal) {
      await placeOrder('LONG', lastClose);
    } else if (shortSignal) {
      await placeOrder('SHORT', lastClose);
    } else {
      console.log("‚è≥ Kh√¥ng c√≥ t√≠n hi·ªáu h·ª£p l·ªá");
    }
  } catch (err) {
    console.error("‚ùå L·ªói ph√¢n t√≠ch t√≠n hi·ªáu:", err.message);
  }
}

// Ki·ªÉm tra t√≠n hi·ªáu m·ªói 3 ph√∫t
setInterval(checkSignal, 3 * 60 * 1000);
